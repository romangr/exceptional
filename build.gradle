plugins {
  id 'java'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'jacoco'
  id "com.jfrog.bintray" version '1.8.4'
}

ext {
  exceptionalVersion = '0.2.0'
}

group 'ru.romangr'
version exceptionalVersion

sourceCompatibility = 1.8

java {
  withJavadocJar()
  withSourcesJar()
}

repositories {
  jcenter()
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId 'exceptional'
      pom {
        name = "${group}:${artifactId}"
        description = 'Exceptional is a small util to simplify error handling in Java'
        url = 'https://github.com/romangr/exceptional'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://github.com/romangr/exceptional/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id = 'romangr'
            name = 'Roman Golovin'
            email = 'roman_gr@mail.com'
            url = 'https://github.com/romangr'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/romangr/exceptional.git'
          developerConnection = 'scm:git:ssh://github.com:romangr/exceptional.git'
          url = 'https://github.com/romangr/exceptional'
        }
      }

      from components.java
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials (PasswordCredentials) {
        username = findProperty("ossrhUsername")
        password = findProperty("ossrhPassword")
      }
    }
  }
}

bintray {
  user = findProperty('bintrayUsername')
  key = findProperty('bintray_api_key')
  publications = ['maven']
  repositories {
    pkg {
      repo = 'java-libs'
      name = 'exceptional'
      version {
        name = exceptionalVersion
      }
      licenses = ['MIT']
      vcsUrl = 'https://github.com/romangr/exceptional.git'
    }
  }
}

dependencies {
  compileOnly('com.google.code.findbugs:jsr305:3.0.2')
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
  testImplementation('org.assertj:assertj-core:3.10.0')
  testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

signing {
  sign publishing.publications.maven
}

test {
  useJUnitPlatform {
    includeTags 'unit'
    includeEngines 'junit-jupiter'
  }
  finalizedBy(jacocoTestReport, jacocoTestCoverageVerification)
}

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

jacoco {
  toolVersion '0.8.4'
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.enabled true
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
      limit {
        counter = 'INSTRUCTION'
        minimum = 0.9
      }
    }
  }
}
