plugins {
  id 'java'
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4'
}

ext {
  exceptionalVersion = '0.5.0-SNAPSHOT'
}

group 'ru.romangr'
version exceptionalVersion

sourceCompatibility = 1.8

java {
  withJavadocJar()
  withSourcesJar()
}

repositories {
  jcenter()
}

coveralls {
  saveAsFile = true
  sendToCoveralls = false
}

publishing {
  publications {
    maven(MavenPublication) {
      artifactId 'exceptional'
      pom {
        name = "${group}:${artifactId}"
        description = 'Exceptional is a small util to simplify error handling in Java'
        url = 'https://github.com/romangr/exceptional'

        licenses {
          license {
            name = 'MIT License'
            url = 'https://github.com/romangr/exceptional/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            id = 'romangr'
            name = 'Roman Golovin'
            email = 'roman_gr@mail.com'
            url = 'https://github.com/romangr'
          }
        }

        scm {
          connection = 'scm:git:git://github.com/romangr/exceptional.git'
          developerConnection = 'scm:git:ssh://github.com:romangr/exceptional.git'
          url = 'https://github.com/romangr/exceptional'
        }
      }

      from components.java
    }
  }
  repositories {
    maven {
      def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
      def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
      url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials (PasswordCredentials) {
        username = findProperty("OSSRH_USERNAME")
        password = findProperty("OSSRH_PASSWORD")
      }
    }
  }
}

dependencies {
  compileOnly('com.google.code.findbugs:jsr305:3.0.2')
  testImplementation('org.junit.jupiter:junit-jupiter-api:5.8.1')
  testImplementation('org.assertj:assertj-core:3.10.0')
  testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.8.1')
}

signing {
  def signingKey = findProperty("GPG_SECRET_KEY")
  def signingPassword = findProperty("GPG_KEY_PASSPRHASE")
  useInMemoryPgpKeys(signingKey, signingPassword)
  sign publishing.publications.maven
}

test {
  useJUnitPlatform {
    includeTags 'unit'
    includeEngines 'junit-jupiter'
  }

  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

tasks.withType(GenerateModuleMetadata) {
  enabled = false
}

jacoco {
  toolVersion '0.8.10'
}

jacocoTestReport {
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = 'CLASS'
      limit {
        counter = 'INSTRUCTION'
        minimum = 0.9
      }
    }
  }
}

tasks.register('reportCoveralls') {
  finalizedBy(tasks.coveralls)
}
